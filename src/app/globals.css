/* Base Layer - Fundamental styles */
@tailwind base;
@layer base {
  /* CSS Custom Properties (Theme Variables) Guide
   *
   * Use CSS variables (custom properties) when you need:
   * 1. Dynamic values that might change (dark/light mode, themes)
   * 2. Values reused across multiple CSS properties
   * 3. Values that need to be changed by JavaScript
   * 
   * Example Use Cases:
   * - Theme colors that are used in multiple places
   * - Spacing values that need to maintain consistency
   * - Values that change based on user preferences or state
   */
  :root {
    /* Color Theme Variables
     * Use these when colors are:
     * - Used in multiple places
     * - Need to change based on theme (dark/light)
     * - Part of your brand identity
     */
    --primary-color: #3b82f6;
    --secondary-color: #1d4ed8;
    
    /* Spacing/Layout Variables
     * Use these when you need:
     * - Consistent spacing across components
     * - Responsive values that change at breakpoints
     */
    --page-margin: 2rem;
    --content-width: 65ch;
    --foreground-rgb: 0, 0, 0;
    --background-start-rgb: 214, 219, 220;
    --background-end-rgb: 255, 255, 255;
  }

  /* Dark Mode Theme Variables
   * Demonstrates how variables enable easy theme switching
   */
  @media (prefers-color-scheme: dark) {
    :root {
      --primary-color: #60a5fa;
      --secondary-color: #3b82f6;
      --foreground-rgb: 255, 255, 255;
      --background-start-rgb: 0, 0, 0;
      --background-end-rgb: 0, 0, 0;
    }
  }

  /* Example of when NOT to use variables:
   * - One-off values that aren't reused
   * - Values that don't change
   * - Simple utilities better handled by Tailwind
   */
  html {
    scroll-behavior: smooth;
  }
  /* Place for element defaults */
}

/* Components Layer - Reusable patterns */
@tailwind components;
@layer components {
  .custom-component {
    @apply px-4 py-2 bg-blue-500 text-white rounded;
  }
  /* Example of using theme variables in components */
  .themed-card {
    /* Use variables for values that might change with theme */
    background-color: var(--primary-color);
    margin: var(--page-margin);
    /* Don't use variables for one-off or static values */
    border-radius: 0.5rem;
    padding: 1rem;
  }
  /* Place for reusable component styles */
}

/* Utilities Layer - Single-purpose classes */
@tailwind utilities;
@layer utilities {
  /* Place for custom utility classes */
  .text-balance {
    text-wrap: balance;
  }
}

/* Using var() with CSS Custom Properties:
 *
 * 1. Basic Usage:
 *    var(--variable-name)
 *    Example: color: var(--primary-color);
 *
 * 2. With Fallback Value:
 *    var(--variable-name, fallback-value)
 *    Example: margin: var(--page-margin, 1rem);
 *
 * 3. Multiple Fallbacks:
 *    var(--first-choice, var(--second-choice, default-value))
 *    Example: color: var(--custom-blue, var(--primary-color, #3b82f6));
 *
 * 4. Using in Calculations:
 *    calc(var(--variable-name) * 2)
 *    Example: width: calc(var(--content-width) + 2rem);
 *
 * 5. In Tailwind Classes:
 *    .custom-width {
 *      width: var(--content-width);
 *    }
 */

/* Best Practices for Tailwind CSS Layer Organization:
 * 
 * 1. @layer base: 
 *    - Use for element defaults (h1, p, etc.)
 *    - Browser reset styles
 *    - Root variables
 * 
 * 2. @layer components:
 *    - Reusable UI components
 *    - Complex patterns combining multiple utilities
 *    - Custom classes that will be used repeatedly
 * 
 * 3. @layer utilities:
 *    - Single-purpose utility classes
 *    - Custom utilities that extend Tailwind's core
 * 
 * Always use @layer to ensure proper CSS specificity
 * Keep components modular and reusable
 */

/* Prism.js Syntax Highlighting Styles 
 * 
 * IMPORTANT: This section is critical for fixing the code block rendering issue
 * These styles work with rehype-prism-plus to ensure proper token highlighting
 * 
 * Fix implementation details:
 * 1. Base styling ensures proper font and colors for code blocks
 * 2. Token classes (.token.*) provide language-specific syntax highlighting 
 * 3. Color scheme matches the dark theme used in MDXComponents.tsx
 * 4. These styles are applied by rehype-prism-plus during the build process
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #f8f8f2; /* Fix: Ensure code text is visible with light color on dark background */
  background: none;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.5;
  tab-size: 4;
  hyphens: none;
}

pre[class*="language-"] {
  padding: 1em;
  margin: .5em 0;
  overflow: auto;
  border-radius: 0.5em;
}

/* Fix: Consistent background color matching the pre wrapper in MDXComponents.tsx */
:not(pre) > code[class*="language-"],
pre[class*="language-"] {
  background: #0f172a; /* Matches bg-[#0f172a] in MDXComponents.tsx */
}

:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
}

/* Token styling for syntax highlighting 
 * Each token type gets a specific color for proper code highlighting
 * These classes are automatically added by rehype-prism-plus
 */
 
/* Comments, prologues, doctypes and CDATA - subtle gray */
.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: #8292a2;
}

/* Default punctuation - light color for visibility */
.token.punctuation {
  color: #f8f8f2;
}

/* Slightly transparent namespaces */
.token.namespace {
  opacity: .7;
}

/* Properties, tags, constants, symbols, deleted content - Pink/Red */
.token.property,
.token.tag,
.token.constant,
.token.symbol,
.token.deleted {
  color: #f92672;
}

/* Boolean values and numbers - Purple */
.token.boolean,
.token.number {
  color: #ae81ff;
}

/* Selectors, attribute names, strings, etc. - Green */
.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #a6e22e;
}

/* Operators, entities, URLs, CSS strings - light color */
.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string,
.token.variable {
  color: #f8f8f2;
}

/* Rules, attribute values, functions, class names - Yellow */
.token.atrule,
.token.attr-value,
.token.function,
.token.class-name {
  color: #e6db74;
}

/* Keywords - Light Blue */
.token.keyword {
  color: #66d9ef;
}

/* Regex and important notes - Orange */
.token.regex,
.token.important {
  color: #fd971f;
}

/* Important markers and bold text */
.token.important,
.token.bold {
  font-weight: bold;
}

/* Italic text */
.token.italic {
  font-style: italic;
}

/* Entity references */
.token.entity {
  cursor: help;
}

body {
  color: rgb(var(--foreground-rgb));
}
